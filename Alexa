#import json

#print('Loading function')
import base64
import json
import urllib


consumer_key = "4naLKlknxxxxxxxxxwhm8PtIPFG8"
consumer_secret = "W244kXtawyGSU82iPqzhyLyalknlknlkxxxxxxxxxxxgyOI2"

#access_token = "31960linkjpknpkon;pnoTbxBr3HyoUoOjxpVhw8qfX"
#access_token_secret = "HkuFA6Ilknpiknpioknp;kinpon[oy6Ze1Rm2wqqNgb"

### Get the Access Token

bearer_token = "%s:%s" % (consumer_key, consumer_secret)
bearer_token_64 = base64.b64encode(bearer_token)

token_request = urllib2.Request("https://api.twitter.com/oauth2/token") 
token_request.add_header("Content-Type", "application/x-www-form-urlencoded;charset=UTF-8")
token_request.add_header("Authorization", "Basic %s" % bearer_token_64)
token_request.data = "grant_type=client_credentials"

token_response = urllib.urlopen(token_request)
token_contents = token_response.read()
token_data = json.loads(token_contents)
access_token = token_data["access_token"]

### Use the Access Token to make an API request

timeline_request = urllib.Request("https://api.twitter.com/1.1/statuses/user_timeline.json?screen_name=SDOTbridges&count=50")
timeline_request.add_header("Authorization", "Bearer %s" % access_token)


#consumer = oauth.Consumer(key=consumer_key, secret=consumer_secret)
#access_token = oauth.Token(key=access_token, secret=access_token_secret)
#client = oauth.Client(consumer, access_token)

#timeline_endpoint = "https://api.twitter.com/1.1/statuses/user_timeline.json?screen_name=SDOTbridges&count=50"

westSeattle = []
firstAveS = []
fremontBridge = []
ballardBridge = []
universityBridge = []
southPark =[]
montLake = []
desired_bridge = []

def lambda_handler(event, context):
    if (event["session"]["application"]["applicationId"] !=
            "amzn1.ask.skill.50ee42fb-c7e7-4621-8af6-a46acfe8b60d"):
        raise ValueError("Invalid Skill ID")

    if event["session"]["new"]:
        on_session_started({"requestId": event["request"]["requestId"]}, event["session"])

    if event["request"]["type"] == "LaunchRequest":
        return on_launch(event["request"], event["session"])
    elif event["request"]["type"] == "IntentRequest":
        return on_intent(event["request"], event["session"])
    elif event["request"]["type"] == "SessionEndedRequest":
        return on_session_ended(event["request"], event["session"])

def on_session_started(session_started_request, session):
    print ("Starting new session.")

def on_launch(launch_request, session):
    return get_welcome_response()

def on_intent(intent_request, session):
    intent = intent_request["intent"]
    intent_name = intent_request["intent"]["name"]

    if intent_name == "bridgeCheck":
        return bridge_check()
    elif intent_name == "AMAZON.HelpIntent":
        return get_welcome_response()
    elif intent_name == "AMAZON.CancelIntent" or intent_name == "AMAZON.StopIntent":
        return handle_session_end_request()
    else:
        raise ValueError("Invalid intent")


def on_session_ended(session_ended_request, session):
    print ("Ending session.")
    # Cleanup goes here...

def handle_session_end_request():
    card_title = "Seattle Bridge Check - Thanks"
    speech_output = "Thank you for using the Seattle Transit skill.  See you next time!"
    should_end_session = True

    return build_response({}, build_speechlet_response(card_title, speech_output, None, should_end_session))



def get_welcome_response():
    session_attributes = {}
    card_title = "Seattle Draw Bridge Status"
    speech_output = "Welcome to the Alexa Seattle Bridge skill. " \
                    "You can ask me for Draw Bridge statuses.  " \
                    "Just ask me for Draw Bridge in Seattle that you would like a status report from."
    reprompt_text = "Please ask me a bridge that you would like me to check, " \
                    "for example Ballard Bridge or Fremont Bridge."
    should_end_session = False
    return build_response(session_attributes, build_speechlet_response(
        card_title, speech_output, reprompt_text, should_end_session))



def bridge_check(intent):
    session_attributes = {}
    card_title = "Bridge Status"
    speech_output = "I'm not sure which bridge you wanted to check. " \
                    "Please try again."
    reprompt_text = "I'm not sure which bridge you wanted to check.  " \
                    "Try asking about Ballard or SW Spokane Street for example."
    should_end_session = False

    if "Bridge" in intent["slots"]:
        bridge_name = intent["slots"]["Bridge"]["value"]
        #?? desired_bridge = get_station_code(station_name.lower())
        if (bridge_name != "unkn"):
            card_title = "Bridge status from " + station_name.title()
    #response, data = client.request(timeline_endpoint)
    
    timeline_response = urllib.urlopen(timeline_request)
    timeline_contents = timeline_response.read()
    tweets = json.loads(timeline_contents)
    #print json.dumps(tweets, indent=2, sort_keys=True)
    for tweet in tweets:
        if 'Spokane' in tweet['text']:
            westSeattle.append(tweet['text'])
        if '1st Ave' in tweet['text']:
            firstAveS.append(tweet['text'])
        if 'Fremont' in tweet['text']:
            fremontBridge.append(tweet['text'])
        if 'Ballard' in tweet['text']:
            ballardBridge.append(tweet['text'])
        if 'University' in tweet['text']:
            universityBridge.append(tweet['text'])
        if 'South Park' in tweet['text']:
            southPark.append(tweet['text'])
        if 'Montlake' in tweet['text']:
            montLake.append(tweet['text'])

    for bridge_name in intent["slots"]["Bridge"]["value"]:
        if bridge_name.text == 'west ':
            desired_bridge = westSeattle
        if bridge_name.text == '1st Ave':
            desired_bridge = firstAveS
        if bridge_name.text == 'Fremont':
            desired_bridge = fremontBridge
        if bridge_name.text == 'Ballard':
            desired_bridge = ballardBridge
        if bridge_name.text == 'South Park':
            desired_bridge = southPark
        if bridge_name.text == 'Montlake':
            desired_bridge = montLake



            speech_output = "The" + bridge_name + " is: "
            for value in desired_bridge[0]:
                if "closed":
                    speech_output += " closed to traffic. ";
                
            else:
                speech_output += "open to traffic."


            reprompt_text = ""

    return build_response(session_attributes, build_speechlet_response(
        card_title, speech_output, reprompt_text, should_end_session))

def build_speechlet_response(title, output, reprompt_text, should_end_session):
    return {
        "outputSpeech": {
            "type": "PlainText",
            "text": output
        },
        "card": {
            "type": "Simple",
            "title": title,
            "content": output
        },
        "reprompt": {
            "outputSpeech": {
                "type": "PlainText",
                "text": reprompt_text
            }
        },
        "shouldEndSession": should_end_session
    }

def build_response(session_attributes, speechlet_response):
    return {
        "version": "1.0",
        "sessionAttributes": session_attributes,
        "response": speechlet_response
    }

